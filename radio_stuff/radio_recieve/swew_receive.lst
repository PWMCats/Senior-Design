
swew_receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080013c  0080013c  00000856  2**0
                  ALLOC
  3 .stab         00002898  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133f  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000442f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e8       	ldi	r30, 0x86	; 134
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 33       	cpi	r26, 0x3C	; 60
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	ac e3       	ldi	r26, 0x3C	; 60
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ae 34       	cpi	r26, 0x4E	; 78
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 45 03 	call	0x68a	; 0x68a <main>
  e2:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <mp3_func.part.0>:
   else{
    if(old_light != new_light){set_bit(PORTD, old_light); clr_bit(PORTD, new_light); old_light = new_light;} //record which light is on
   } 
}

void mp3_func(uint8_t cmd, uint8_t dat) //operates CATALEX MP3 Serial Board
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
{
  uint8_t i;
  if(dat > 0){
	  Send_buf[0] = 0x7e; // start byte
  ee:	9e e7       	ldi	r25, 0x7E	; 126
  f0:	90 93 3f 01 	sts	0x013F, r25
	  Send_buf[1] = 0xff; // version
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	90 93 40 01 	sts	0x0140, r25
	  Send_buf[2] = 0x06; //
  fa:	96 e0       	ldi	r25, 0x06	; 6
  fc:	90 93 41 01 	sts	0x0141, r25
	  Send_buf[3] = cmd; //
 100:	80 93 42 01 	sts	0x0142, r24
	  Send_buf[4] = 0x00;//
 104:	10 92 43 01 	sts	0x0143, r1
	  Send_buf[5] = 0x00;//datah
 108:	10 92 44 01 	sts	0x0144, r1
	  Send_buf[6] = dat; //datal
 10c:	60 93 45 01 	sts	0x0145, r22
	  Send_buf[7] = 0xef; //
 110:	8f ee       	ldi	r24, 0xEF	; 239
 112:	80 93 46 01 	sts	0x0146, r24
 116:	c0 e4       	ldi	r28, 0x40	; 64
 118:	d1 e0       	ldi	r29, 0x01	; 1
 11a:	8e e7       	ldi	r24, 0x7E	; 126
 11c:	01 c0       	rjmp	.+2      	; 0x120 <mp3_func.part.0+0x36>
 11e:	89 91       	ld	r24, Y+
	  for(i=0; i<8; i++)//
	  {
		 uart_putc(Send_buf[i]) ;
 120:	0e 94 13 03 	call	0x626	; 0x626 <uart_putc>
	  Send_buf[3] = cmd; //
	  Send_buf[4] = 0x00;//
	  Send_buf[5] = 0x00;//datah
	  Send_buf[6] = dat; //datal
	  Send_buf[7] = 0xef; //
	  for(i=0; i<8; i++)//
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	c7 34       	cpi	r28, 0x47	; 71
 128:	d8 07       	cpc	r29, r24
 12a:	c9 f7       	brne	.-14     	; 0x11e <mp3_func.part.0+0x34>
	  {
		 uart_putc(Send_buf[i]) ;
	  }
	  playmode = PLAY;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 0a 01 	sts	0x010A, r24
  }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <adc_init>:
uint8_t reading;
//*****************************
// ADC Initialization
void adc_init(void){

  ADCSRA  |= (1<< ADEN);//adc enabled
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 83       	st	Z, r24
  ADMUX |= (1<< ADLAR) | (1<<REFS0);//left justify, use 5v reference
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 66       	ori	r24, 0x60	; 96
 14a:	80 83       	st	Z, r24
  ADCSRB |= (1<<MUX5); // use ADC8 on PD4, free running mode
 14c:	eb e7       	ldi	r30, 0x7B	; 123
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <port_init>:
//*****************************
// PORT Initialization
void port_init(void){

  //Init PORTD to turn on lights
  DDRD |= (1<<PD7)|(1<<PD6)|(1<<PD5); //set light pins to output
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	80 6e       	ori	r24, 0xE0	; 224
 15c:	8a b9       	out	0x0a, r24	; 10
  DDRF |= (1<<PF7); //set pin 7 to output for snowfall
 15e:	87 9a       	sbi	0x10, 7	; 16
 160:	08 95       	ret

00000162 <light_test_routine>:
//*****************************
// for testing
void light_test_routine(void){
 uint16_t i, ii; 

 for(ii=5; ii<8; ii++){
 162:	25 e0       	ldi	r18, 0x05	; 5
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	56 2f       	mov	r21, r22
 16a:	02 2e       	mov	r0, r18
 16c:	01 c0       	rjmp	.+2      	; 0x170 <light_test_routine+0xe>
 16e:	55 0f       	add	r21, r21
 170:	0a 94       	dec	r0
 172:	ea f7       	brpl	.-6      	; 0x16e <light_test_routine+0xc>
}
//*****************************

//*****************************
// for testing
void light_test_routine(void){
 174:	8a ef       	ldi	r24, 0xFA	; 250
 176:	90 e0       	ldi	r25, 0x00	; 0
 uint16_t i, ii; 

 for(ii=5; ii<8; ii++){
  for(i=0;i<250; i++){
   PORTD |= (1<<ii);
 178:	4b b1       	in	r20, 0x0b	; 11
 17a:	45 2b       	or	r20, r21
 17c:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	e3 ef       	ldi	r30, 0xF3	; 243
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <light_test_routine+0x20>
 186:	00 c0       	rjmp	.+0      	; 0x188 <light_test_routine+0x26>
 188:	00 00       	nop
   _delay_ms(2);
   PORTD = 0;
 18a:	1b b8       	out	0x0b, r1	; 11
 18c:	01 97       	sbiw	r24, 0x01	; 1
// for testing
void light_test_routine(void){
 uint16_t i, ii; 

 for(ii=5; ii<8; ii++){
  for(i=0;i<250; i++){
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	99 f7       	brne	.-26     	; 0x178 <light_test_routine+0x16>
//*****************************
// for testing
void light_test_routine(void){
 uint16_t i, ii; 

 for(ii=5; ii<8; ii++){
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	28 30       	cpi	r18, 0x08	; 8
 198:	31 05       	cpc	r19, r1
 19a:	31 f7       	brne	.-52     	; 0x168 <light_test_routine+0x6>
 19c:	08 95       	ret

0000019e <light_func>:
/* ------------------------------------------------------------------------- */

void light_func(uint8_t new_light) //latches Federal Signal circuit
{  //toggles based on state
   static uint8_t old_light;         
   if((new_light == 0) && (old_light !=0)){set_bit(PORTD, old_light); old_light = 0;} //turn light off
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <light_func+0xe>
 1a2:	20 91 3d 01 	lds	r18, 0x013D
 1a6:	21 11       	cpse	r18, r1
 1a8:	1c c0       	rjmp	.+56     	; 0x1e2 <light_func+0x44>
 1aa:	08 95       	ret
   else{
    if(old_light != new_light){set_bit(PORTD, old_light); clr_bit(PORTD, new_light); old_light = new_light;} //record which light is on
 1ac:	40 91 3d 01 	lds	r20, 0x013D
 1b0:	48 17       	cp	r20, r24
 1b2:	d9 f3       	breq	.-10     	; 0x1aa <light_func+0xc>
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <light_func+0x24>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <light_func+0x20>
 1c6:	96 2b       	or	r25, r22
 1c8:	9b b9       	out	0x0b, r25	; 11
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	08 2e       	mov	r0, r24
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <light_func+0x34>
 1d0:	22 0f       	add	r18, r18
 1d2:	0a 94       	dec	r0
 1d4:	ea f7       	brpl	.-6      	; 0x1d0 <light_func+0x32>
 1d6:	20 95       	com	r18
 1d8:	29 23       	and	r18, r25
 1da:	2b b9       	out	0x0b, r18	; 11
 1dc:	80 93 3d 01 	sts	0x013D, r24
 1e0:	08 95       	ret
/* ------------------------------------------------------------------------- */

void light_func(uint8_t new_light) //latches Federal Signal circuit
{  //toggles based on state
   static uint8_t old_light;         
   if((new_light == 0) && (old_light !=0)){set_bit(PORTD, old_light); old_light = 0;} //turn light off
 1e2:	3b b1       	in	r19, 0x0b	; 11
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <light_func+0x50>
 1ec:	88 0f       	add	r24, r24
 1ee:	0a 94       	dec	r0
 1f0:	ea f7       	brpl	.-6      	; 0x1ec <light_func+0x4e>
 1f2:	38 2b       	or	r19, r24
 1f4:	3b b9       	out	0x0b, r19	; 11
 1f6:	10 92 3d 01 	sts	0x013D, r1
 1fa:	08 95       	ret

000001fc <mp3_func>:
}

void mp3_func(uint8_t cmd, uint8_t dat) //operates CATALEX MP3 Serial Board
{
  uint8_t i;
  if(dat > 0){
 1fc:	61 11       	cpse	r22, r1
 1fe:	0c 94 75 00 	jmp	0xea	; 0xea <mp3_func.part.0>
 202:	08 95       	ret

00000204 <nrf24_ce_digitalWrite.part.0>:
 *    - state:0 => Pin LOW     */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,0);
 204:	28 9a       	sbi	0x05, 0	; 5
 206:	08 95       	ret

00000208 <nrf24_csn_digitalWrite.part.1>:
}
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,1);
 208:	29 9a       	sbi	0x05, 1	; 5
 20a:	08 95       	ret

0000020c <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    return payload_len;
}
 20c:	80 91 4d 01 	lds	r24, 0x014D
 210:	08 95       	ret

00000212 <spi_transfer>:
    {
        set_bit(PORTB,2);
    }
    else
    {
        clr_bit(PORTB,2);
 212:	2a 98       	cbi	0x05, 2	; 5
 214:	68 2f       	mov	r22, r24
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	27 e0       	ldi	r18, 0x07	; 7
 21a:	30 e0       	ldi	r19, 0x00	; 0

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
    uint8_t i = 0;
    uint8_t rx = 0;    
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	09 c0       	rjmp	.+18     	; 0x232 <spi_transfer+0x20>
    {
        set_bit(PORTB,3);
    }
    else
    {
        clr_bit(PORTB,3);
 220:	2b 98       	cbi	0x05, 3	; 5
}
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,2);
 222:	2a 9a       	sbi	0x05, 2	; 5
            nrf24_mosi_digitalWrite(LOW);
        }

        nrf24_sck_digitalWrite(HIGH);        

        rx = rx << 1;
 224:	88 0f       	add	r24, r24
        if(nrf24_miso_digitalRead())
 226:	1c 99       	sbic	0x03, 4	; 3
        {
            rx |= 0x01;
 228:	81 60       	ori	r24, 0x01	; 1
    {
        set_bit(PORTB,2);
    }
    else
    {
        clr_bit(PORTB,2);
 22a:	2a 98       	cbi	0x05, 2	; 5
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	31 09       	sbc	r19, r1
 230:	58 f0       	brcs	.+22     	; 0x248 <spi_transfer+0x36>
    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    {

        if(tx & (1<<(7-i)))
 232:	ab 01       	movw	r20, r22
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <spi_transfer+0x2a>
 238:	55 95       	asr	r21
 23a:	47 95       	ror	r20
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <spi_transfer+0x26>
 240:	40 ff       	sbrs	r20, 0
 242:	ee cf       	rjmp	.-36     	; 0x220 <spi_transfer+0xe>
}
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,3);
 244:	2b 9a       	sbi	0x05, 3	; 5
 246:	ed cf       	rjmp	.-38     	; 0x222 <spi_transfer+0x10>
        nrf24_sck_digitalWrite(LOW);                

    }

    return rx;
}
 248:	08 95       	ret

0000024a <nrf24_payloadLength>:
    return (fifoStatus & (1 << RX_EMPTY));
}

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	1f 92       	push	r1
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 254:	29 98       	cbi	0x05, 1	; 5
/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
    uint8_t status;
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_RX_PL_WID);
 256:	80 e6       	ldi	r24, 0x60	; 96
 258:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
    status = spi_transfer(0x00);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    nrf24_csn_digitalWrite(HIGH);
    return status;
}
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	1f 92       	push	r1
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 27c:	29 98       	cbi	0x05, 1	; 5

uint8_t nrf24_getStatus()
{
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
    rv = spi_transfer(NOP);
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    nrf24_csn_digitalWrite(HIGH);
    return rv;
}
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 294:	0e 94 39 01 	call	0x272	; 0x272 <nrf24_getStatus>
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 298:	98 2f       	mov	r25, r24
 29a:	90 73       	andi	r25, 0x30	; 48
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <nrf24_isSending+0xe>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
        return 0; /* false */
    }

    return 1; /* true */

}
 2a2:	08 95       	ret

000002a4 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    uint8_t rv;

    rv = nrf24_getStatus();
 2a4:	0e 94 39 01 	call	0x272	; 0x272 <nrf24_getStatus>

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
 2a8:	85 fd       	sbrc	r24, 5
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <nrf24_lastMessageStatus+0x14>
    {
        return NRF24_TRANSMISSON_OK;
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
 2ac:	84 fd       	sbrc	r24, 4
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <nrf24_lastMessageStatus+0x10>
        return NRF24_MESSAGE_LOST;
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
 2b2:	08 95       	ret
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    {
        return NRF24_MESSAGE_LOST;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
    rv = nrf24_getStatus();

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    {
        return NRF24_TRANSMISSON_OK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <nrf24_transferSync>:
    return rx;
}

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	e4 2e       	mov	r14, r20
    uint8_t i;

    for(i=0;i<len;i++)
 2ca:	44 23       	and	r20, r20
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <nrf24_transferSync+0x2a>
 2ce:	8c 01       	movw	r16, r24
 2d0:	eb 01       	movw	r28, r22
 2d2:	f1 2c       	mov	r15, r1
    {
        datain[i] = spi_transfer(dataout[i]);
 2d4:	f8 01       	movw	r30, r16
 2d6:	81 91       	ld	r24, Z+
 2d8:	8f 01       	movw	r16, r30
 2da:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 2de:	89 93       	st	Y+, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
 2e0:	f3 94       	inc	r15
 2e2:	fe 10       	cpse	r15, r14
 2e4:	f7 cf       	rjmp	.-18     	; 0x2d4 <nrf24_transferSync+0x18>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	06 2f       	mov	r16, r22
    uint8_t i;
    
    for(i=0;i<len;i++)
 2fe:	66 23       	and	r22, r22
 300:	41 f0       	breq	.+16     	; 0x312 <nrf24_transmitSync+0x1e>
 302:	ec 01       	movw	r28, r24
 304:	10 e0       	ldi	r17, 0x00	; 0
    {
        spi_transfer(dataout[i]);
 306:	89 91       	ld	r24, Y+
 308:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 30c:	1f 5f       	subi	r17, 0xFF	; 255
 30e:	10 13       	cpse	r17, r16
 310:	fa cf       	rjmp	.-12     	; 0x306 <nrf24_transmitSync+0x12>
    {
        spi_transfer(dataout[i]);
    }

}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	1f 92       	push	r1
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 326:	29 98       	cbi	0x05, 1	; 5

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 328:	8f 71       	andi	r24, 0x1F	; 31
 32a:	80 62       	ori	r24, 0x20	; 32
 32c:	69 83       	std	Y+1, r22	; 0x01
 32e:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
    spi_transfer(value);
 332:	69 81       	ldd	r22, Y+1	; 0x01
 334:	86 2f       	mov	r24, r22
 336:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
}
 33a:	0f 90       	pop	r0
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	0c 94 04 01 	jmp	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>

00000344 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 34a:	29 98       	cbi	0x05, 1	; 5
{
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 34c:	81 e6       	ldi	r24, 0x61	; 97
 34e:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 352:	40 91 4d 01 	lds	r20, 0x014D
 356:	be 01       	movw	r22, r28
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf24_transferSync>
 35e:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
 362:	60 e4       	ldi	r22, 0x40	; 64
 364:	87 e0       	ldi	r24, 0x07	; 7
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
 36a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <nrf24_configRegister>

0000036e <nrf24_powerUpRx>:
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 36e:	29 98       	cbi	0x05, 1	; 5
}

void nrf24_powerUpRx()
{     
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(FLUSH_RX);
 370:	82 ee       	ldi	r24, 0xE2	; 226
 372:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 376:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    nrf24_csn_digitalWrite(HIGH);

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 37a:	60 e7       	ldi	r22, 0x70	; 112
 37c:	87 e0       	ldi	r24, 0x07	; 7
 37e:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 382:	28 98       	cbi	0x05, 0	; 5
    nrf24_csn_digitalWrite(HIGH);

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 

    nrf24_ce_digitalWrite(LOW);    
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 384:	6b e0       	ldi	r22, 0x0B	; 11
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
 38c:	0c 94 02 01 	jmp	0x204	; 0x204 <nrf24_ce_digitalWrite.part.0>

00000390 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    /* Use static payload length ... */
    payload_len = pay_length;
 390:	60 93 4d 01 	sts	0x014D, r22

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 394:	68 2f       	mov	r22, r24
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	81 e1       	ldi	r24, 0x11	; 17
 3a0:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 3a4:	60 91 4d 01 	lds	r22, 0x014D
 3a8:	82 e1       	ldi	r24, 0x12	; 18
 3aa:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	83 e1       	ldi	r24, 0x13	; 19
 3b2:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	85 e1       	ldi	r24, 0x15	; 21
 3c2:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	86 e1       	ldi	r24, 0x16	; 22
 3ca:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 3ce:	66 e0       	ldi	r22, 0x06	; 6
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 3d6:	68 e0       	ldi	r22, 0x08	; 8
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 3ee:	6f e4       	ldi	r22, 0x4F	; 79
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	8c e1       	ldi	r24, 0x1C	; 28
 3fa:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 3fe:	0c 94 b7 01 	jmp	0x36e	; 0x36e <nrf24_powerUpRx>

00000402 <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 402:	60 e7       	ldi	r22, 0x70	; 112
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	0e 94 8e 01 	call	0x31c	; 0x31c <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 40a:	6a e0       	ldi	r22, 0x0A	; 10
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0c 94 8e 01 	jmp	0x31c	; 0x31c <nrf24_configRegister>

00000412 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	1f 92       	push	r1
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	f8 2e       	mov	r15, r24
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 428:	28 98       	cbi	0x05, 0	; 5
{    
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 42a:	99 83       	std	Y+1, r25	; 0x01
 42c:	0e 94 01 02 	call	0x402	; 0x402 <nrf24_powerUpTx>
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 430:	29 98       	cbi	0x05, 1	; 5
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 432:	81 ee       	ldi	r24, 0xE1	; 225
 434:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 438:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 43c:	29 98       	cbi	0x05, 1	; 5

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 43e:	80 ea       	ldi	r24, 0xA0	; 160
 440:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 444:	10 91 4d 01 	lds	r17, 0x014D
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 448:	99 81       	ldd	r25, Y+1	; 0x01
 44a:	11 23       	and	r17, r17
 44c:	61 f0       	breq	.+24     	; 0x466 <nrf24_send+0x54>
 44e:	0f 2d       	mov	r16, r15
 450:	cf 2c       	mov	r12, r15
 452:	d9 2e       	mov	r13, r25
    {
        spi_transfer(dataout[i]);
 454:	f6 01       	movw	r30, r12
 456:	81 91       	ld	r24, Z+
 458:	6f 01       	movw	r12, r30
 45a:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
 45e:	8c 2d       	mov	r24, r12
 460:	80 1b       	sub	r24, r16
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 462:	81 17       	cp	r24, r17
 464:	b8 f3       	brcs	.-18     	; 0x454 <nrf24_send+0x42>
 466:	0e 94 04 01 	call	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
}
 46a:	0f 90       	pop	r0
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	0c 94 02 01 	jmp	0x204	; 0x204 <nrf24_ce_digitalWrite.part.0>

0000047e <nrf24_powerDown>:
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 47e:	28 98       	cbi	0x05, 0	; 5
}

void nrf24_powerDown()
{
    nrf24_ce_digitalWrite(LOW);
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 480:	68 e0       	ldi	r22, 0x08	; 8
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0c 94 8e 01 	jmp	0x31c	; 0x31c <nrf24_configRegister>

00000488 <nrf24_readRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	1f 92       	push	r1
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	8b 01       	movw	r16, r22
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 498:	29 98       	cbi	0x05, 1	; 5

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 49a:	8f 71       	andi	r24, 0x1F	; 31
 49c:	49 83       	std	Y+1, r20	; 0x01
 49e:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
    nrf24_transferSync(value,value,len);
 4a2:	49 81       	ldd	r20, Y+1	; 0x01
 4a4:	b8 01       	movw	r22, r16
 4a6:	c8 01       	movw	r24, r16
 4a8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
}
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	0c 94 04 01 	jmp	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>

000004ba <nrf24_rxFifoEmpty>:
    return !nrf24_rxFifoEmpty();;
}

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	1f 92       	push	r1
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	be 01       	movw	r22, r28
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	87 e1       	ldi	r24, 0x17	; 23
 4ce:	0e 94 44 02 	call	0x488	; 0x488 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d4:	81 70       	andi	r24, 0x01	; 1
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <nrf24_dataReady>:
}

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	1f 92       	push	r1
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 4e8:	0e 94 39 01 	call	0x272	; 0x272 <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 4ec:	86 ff       	sbrs	r24, 6
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <nrf24_dataReady+0x1c>
    {
        return 1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
    }

    return !nrf24_rxFifoEmpty();;
}
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret
/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	be 01       	movw	r22, r28
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	87 e1       	ldi	r24, 0x17	; 23
 504:	0e 94 44 02 	call	0x488	; 0x488 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	80 95       	com	r24
 50c:	81 70       	andi	r24, 0x01	; 1
    {
        return 1;
    }

    return !nrf24_rxFifoEmpty();;
}
 50e:	0f 90       	pop	r0
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <nrf24_retransmissionCount>:
    nrf24_configRegister(STATUS,(1<<RX_DR));   
}

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	1f 92       	push	r1
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	be 01       	movw	r22, r28
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	88 e0       	ldi	r24, 0x08	; 8
 52a:	0e 94 44 02 	call	0x488	; 0x488 <nrf24_readRegister>
    rv = rv & 0x0F;
 52e:	89 81       	ldd	r24, Y+1	; 0x01
    return rv;
}
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <nrf24_writeRegister+0xe>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	04 2f       	mov	r16, r20
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 54e:	29 98       	cbi	0x05, 1	; 5

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 550:	8f 71       	andi	r24, 0x1F	; 31
 552:	80 62       	ori	r24, 0x20	; 32
 554:	69 83       	std	Y+1, r22	; 0x01
 556:	7a 83       	std	Y+2, r23	; 0x02
 558:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 55c:	69 81       	ldd	r22, Y+1	; 0x01
 55e:	7a 81       	ldd	r23, Y+2	; 0x02
 560:	00 23       	and	r16, r16
 562:	51 f0       	breq	.+20     	; 0x578 <nrf24_writeRegister+0x3e>
 564:	7b 01       	movw	r14, r22
 566:	10 e0       	ldi	r17, 0x00	; 0
    {
        spi_transfer(dataout[i]);
 568:	f7 01       	movw	r30, r14
 56a:	81 91       	ld	r24, Z+
 56c:	7f 01       	movw	r14, r30
 56e:	0e 94 09 01 	call	0x212	; 0x212 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
 572:	1f 5f       	subi	r17, 0xFF	; 255
 574:	10 13       	cpse	r17, r16
 576:	f8 cf       	rjmp	.-16     	; 0x568 <nrf24_writeRegister+0x2e>
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    nrf24_transmitSync(value,len);
    nrf24_csn_digitalWrite(HIGH);
}
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	0c 94 04 01 	jmp	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>

0000058c <nrf24_rx_address>:
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 58c:	28 98       	cbi	0x05, 0	; 5

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    nrf24_ce_digitalWrite(LOW);
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 58e:	45 e0       	ldi	r20, 0x05	; 5
 590:	bc 01       	movw	r22, r24
 592:	8b e0       	ldi	r24, 0x0B	; 11
 594:	0e 94 9d 02 	call	0x53a	; 0x53a <nrf24_writeRegister>
 598:	0c 94 02 01 	jmp	0x204	; 0x204 <nrf24_ce_digitalWrite.part.0>

0000059c <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 5a2:	45 e0       	ldi	r20, 0x05	; 5
 5a4:	bc 01       	movw	r22, r24
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	0e 94 9d 02 	call	0x53a	; 0x53a <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 5ac:	45 e0       	ldi	r20, 0x05	; 5
 5ae:	be 01       	movw	r22, r28
 5b0:	80 e1       	ldi	r24, 0x10	; 16
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 5b6:	0c 94 9d 02 	jmp	0x53a	; 0x53a <nrf24_writeRegister>

000005ba <nrf24_setupPins>:
 *    - Set CSN pin output
 *    - Set CE pin output     */

void nrf24_setupPins()
{
    set_bit(DDRB,0); // CE output
 5ba:	20 9a       	sbi	0x04, 0	; 4
    set_bit(DDRB,1); // CSN output
 5bc:	21 9a       	sbi	0x04, 1	; 4
    set_bit(DDRB,2); // SCK output
 5be:	22 9a       	sbi	0x04, 2	; 4
    set_bit(DDRB,3); // MOSI output
 5c0:	23 9a       	sbi	0x04, 3	; 4
    clr_bit(DDRB,4); // MISO input
 5c2:	24 98       	cbi	0x04, 4	; 4
 5c4:	08 95       	ret

000005c6 <nrf24_init>:
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    nrf24_setupPins();
 5c6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrf24_setupPins>
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 5ca:	28 98       	cbi	0x05, 0	; 5
 5cc:	0c 94 04 01 	jmp	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>

000005d0 <nrf24_ce_digitalWrite>:
/* nrf24 CE pin control function
 *    - state:1 => Pin HIGH
 *    - state:0 => Pin LOW     */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 5d0:	81 11       	cpse	r24, r1
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
    }
    else
    {
        clr_bit(PORTB,0);
 5d4:	28 98       	cbi	0x05, 0	; 5
 5d6:	08 95       	ret
 5d8:	0c 94 02 01 	jmp	0x204	; 0x204 <nrf24_ce_digitalWrite.part.0>

000005dc <nrf24_csn_digitalWrite>:
    }
}
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 5dc:	81 11       	cpse	r24, r1
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
    }
    else
    {
        clr_bit(PORTB,1);
 5e0:	29 98       	cbi	0x05, 1	; 5
 5e2:	08 95       	ret
 5e4:	0c 94 04 01 	jmp	0x208	; 0x208 <nrf24_csn_digitalWrite.part.1>

000005e8 <nrf24_sck_digitalWrite>:
    }
}
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 5e8:	81 11       	cpse	r24, r1
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
    }
    else
    {
        clr_bit(PORTB,2);
 5ec:	2a 98       	cbi	0x05, 2	; 5
 5ee:	08 95       	ret
}
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,2);
 5f0:	2a 9a       	sbi	0x05, 2	; 5
 5f2:	08 95       	ret

000005f4 <nrf24_mosi_digitalWrite>:
        clr_bit(PORTB,2);
    }
}
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 5f4:	81 11       	cpse	r24, r1
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,3);
    }
    else
    {
        clr_bit(PORTB,3);
 5f8:	2b 98       	cbi	0x05, 3	; 5
 5fa:	08 95       	ret
}
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
    {
        set_bit(PORTB,3);
 5fc:	2b 9a       	sbi	0x05, 3	; 5
 5fe:	08 95       	ret

00000600 <nrf24_miso_digitalRead>:
        clr_bit(PORTB,3);
    }
}
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,4);
 600:	83 b1       	in	r24, 0x03	; 3
}
 602:	80 71       	andi	r24, 0x10	; 16
 604:	08 95       	ret

00000606 <uart_init>:
 606:	88 e4       	ldi	r24, 0x48	; 72
 608:	8a b9       	out	0x0a, r24	; 10
 60a:	10 92 cd 00 	sts	0x00CD, r1
 60e:	83 e3       	ldi	r24, 0x33	; 51
 610:	80 93 cc 00 	sts	0x00CC, r24
 614:	10 92 c8 00 	sts	0x00C8, r1
 618:	88 e1       	ldi	r24, 0x18	; 24
 61a:	80 93 c9 00 	sts	0x00C9, r24
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	80 93 ca 00 	sts	0x00CA, r24
 624:	08 95       	ret

00000626 <uart_putc>:
 626:	90 91 c8 00 	lds	r25, 0x00C8
 62a:	95 ff       	sbrs	r25, 5
 62c:	fc cf       	rjmp	.-8      	; 0x626 <uart_putc>
 62e:	80 93 ce 00 	sts	0x00CE, r24
 632:	08 95       	ret

00000634 <uart_puts>:
 634:	fc 01       	movw	r30, r24
 636:	20 81       	ld	r18, Z
 638:	22 23       	and	r18, r18
 63a:	51 f0       	breq	.+20     	; 0x650 <uart_puts+0x1c>
 63c:	31 96       	adiw	r30, 0x01	; 1
 63e:	80 91 c8 00 	lds	r24, 0x00C8
 642:	85 ff       	sbrs	r24, 5
 644:	fc cf       	rjmp	.-8      	; 0x63e <uart_puts+0xa>
 646:	20 93 ce 00 	sts	0x00CE, r18
 64a:	21 91       	ld	r18, Z+
 64c:	21 11       	cpse	r18, r1
 64e:	f7 cf       	rjmp	.-18     	; 0x63e <uart_puts+0xa>
 650:	08 95       	ret

00000652 <uart_getc>:
 652:	80 91 c8 00 	lds	r24, 0x00C8
 656:	87 ff       	sbrs	r24, 7
 658:	fc cf       	rjmp	.-8      	; 0x652 <uart_getc>
 65a:	80 91 ce 00 	lds	r24, 0x00CE
 65e:	08 95       	ret

00000660 <uart_gets>:
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	20 91 c8 00 	lds	r18, 0x00C8
 666:	27 ff       	sbrs	r18, 7
 668:	fc cf       	rjmp	.-8      	; 0x662 <uart_gets+0x2>
 66a:	20 91 ce 00 	lds	r18, 0x00CE
 66e:	fc 01       	movw	r30, r24
 670:	e3 0f       	add	r30, r19
 672:	f1 1d       	adc	r31, r1
 674:	20 83       	st	Z, r18
 676:	3f 5f       	subi	r19, 0xFF	; 255
 678:	2a 30       	cpi	r18, 0x0A	; 10
 67a:	11 f0       	breq	.+4      	; 0x680 <uart_gets+0x20>
 67c:	2d 30       	cpi	r18, 0x0D	; 13
 67e:	89 f7       	brne	.-30     	; 0x662 <uart_gets+0x2>
 680:	fc 01       	movw	r30, r24
 682:	e3 0f       	add	r30, r19
 684:	f1 1d       	adc	r31, r1
 686:	10 82       	st	Z, r1
 688:	08 95       	ret

0000068a <main>:

//MAIN
//*****************************//*****************************
int main()
{
    CPU_PRESCALE(CPU_8MHz);
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	80 93 61 00 	sts	0x0061, r24
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	80 93 61 00 	sts	0x0061, r24
//*****************************
// PORT Initialization
void port_init(void){

  //Init PORTD to turn on lights
  DDRD |= (1<<PD7)|(1<<PD6)|(1<<PD5); //set light pins to output
 696:	8a b1       	in	r24, 0x0a	; 10
 698:	80 6e       	ori	r24, 0xE0	; 224
 69a:	8a b9       	out	0x0a, r24	; 10
  DDRF |= (1<<PF7); //set pin 7 to output for snowfall
 69c:	87 9a       	sbi	0x10, 7	; 16
uint8_t reading;
//*****************************
// ADC Initialization
void adc_init(void){

  ADCSRA  |= (1<< ADEN);//adc enabled
 69e:	80 91 7a 00 	lds	r24, 0x007A
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	80 93 7a 00 	sts	0x007A, r24
  ADMUX |= (1<< ADLAR) | (1<<REFS0);//left justify, use 5v reference
 6a8:	80 91 7c 00 	lds	r24, 0x007C
 6ac:	80 66       	ori	r24, 0x60	; 96
 6ae:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB |= (1<<MUX5); // use ADC8 on PD4, free running mode
 6b2:	80 91 7b 00 	lds	r24, 0x007B
 6b6:	80 62       	ori	r24, 0x20	; 32
 6b8:	80 93 7b 00 	sts	0x007B, r24
int main()
{
    CPU_PRESCALE(CPU_8MHz);
    port_init();
    adc_init(); //son of a bitch
    uart_init();
 6bc:	0e 94 03 03 	call	0x606	; 0x606 <uart_init>
 6c0:	6e e1       	ldi	r22, 0x1E	; 30
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	0e 94 75 00 	call	0xea	; 0xea <mp3_func.part.0>
    mp3_func(CMD_SET_VOLUME, MAX_VOL);

    //deactivate relay (it's active low)
    PORTD |= 0x00;
 6c8:	8b b1       	in	r24, 0x0b	; 11
 6ca:	8b b9       	out	0x0b, r24	; 11
 
    static uint8_t timeout;
    /* init hardware pins */
    nrf24_init();
 6cc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <nrf24_init>
    
    /* Channel #21 , payload length: 4 */
    nrf24_config(21,4);
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	85 e1       	ldi	r24, 0x15	; 21
 6d4:	0e 94 c8 01 	call	0x390	; 0x390 <nrf24_config>
 
    /* Set the device addresses */
    nrf24_tx_address(tx_address);
 6d8:	85 e0       	ldi	r24, 0x05	; 5
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 ce 02 	call	0x59c	; 0x59c <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 c6 02 	call	0x58c	; 0x58c <nrf24_rx_address>

   while(1)
   {    
        //if(playmode==PLAY){q++; if(q>50){playmode = OFF;q=0;}}

      while(!nrf24_dataReady()){if(timeout>1000){break;} timeout++;} //wait for transmission
 6e8:	0e 94 6f 02 	call	0x4de	; 0x4de <nrf24_dataReady>
 6ec:	81 11       	cpse	r24, r1
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <main+0x78>
 6f0:	80 91 3e 01 	lds	r24, 0x013E
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 3e 01 	sts	0x013E, r24
 6fa:	0e 94 6f 02 	call	0x4de	; 0x4de <nrf24_dataReady>
 6fe:	88 23       	and	r24, r24
 700:	b9 f3       	breq	.-18     	; 0x6f0 <main+0x66>
      if(nrf24_dataReady())
 702:	0e 94 6f 02 	call	0x4de	; 0x4de <nrf24_dataReady>
 706:	81 11       	cpse	r24, r1
 708:	14 c0       	rjmp	.+40     	; 0x732 <main+0xa8>
        }  
       
        	//*****************************
        // Radio Operation - send snow data back
	 /* Automatically goes to TX mode */
		  nrf24_send(data_array);        
 70a:	88 e4       	ldi	r24, 0x48	; 72
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	0e 94 09 02 	call	0x412	; 0x412 <nrf24_send>
			  
	 /* Wait for transmission to end */
 		  while(nrf24_isSending());
 712:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_isSending>
 716:	81 11       	cpse	r24, r1
 718:	fc cf       	rjmp	.-8      	; 0x712 <main+0x88>

        nrf24_powerUpRx();
 71a:	0e 94 b7 01 	call	0x36e	; 0x36e <nrf24_powerUpRx>
 71e:	2f e9       	ldi	r18, 0x9F	; 159
 720:	86 e8       	ldi	r24, 0x86	; 134
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x9a>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0xa4>
 72e:	00 00       	nop
 730:	db cf       	rjmp	.-74     	; 0x6e8 <main+0x5e>
        //if(playmode==PLAY){q++; if(q>50){playmode = OFF;q=0;}}

      while(!nrf24_dataReady()){if(timeout>1000){break;} timeout++;} //wait for transmission
      if(nrf24_dataReady())
      {
            nrf24_getData(data_array); 	
 732:	88 e4       	ldi	r24, 0x48	; 72
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 a2 01 	call	0x344	; 0x344 <nrf24_getData>
	    if(data_array[0] == 0xFF) //warning system control
 73a:	80 91 48 01 	lds	r24, 0x0148
 73e:	8f 3f       	cpi	r24, 0xFF	; 255
 740:	a1 f0       	breq	.+40     	; 0x76a <main+0xe0>
	    {
	     light_func(data_array[1]);
	      mp3_func(CMD_PLAY_W_INDEX, data_array[2]);
          //    light_test_routine();
            }
  	    if(data_array[3]) //snow check is set
 742:	80 91 4b 01 	lds	r24, 0x014B
 746:	88 23       	and	r24, r24
 748:	01 f3       	breq	.-64     	; 0x70a <main+0x80>
	    { 
	     ADCSRA |= 1<<ADSC; //request value
 74a:	80 91 7a 00 	lds	r24, 0x007A
 74e:	80 64       	ori	r24, 0x40	; 64
 750:	80 93 7a 00 	sts	0x007A, r24
	     while (bit_is_clear(ADCSRA, ADIF)){} //shouldn't take long
 754:	80 91 7a 00 	lds	r24, 0x007A
 758:	84 ff       	sbrs	r24, 4
 75a:	fc cf       	rjmp	.-8      	; 0x754 <main+0xca>
	     reading = ADCH;
 75c:	80 91 79 00 	lds	r24, 0x0079
 760:	80 93 4c 01 	sts	0x014C, r24
  	     data_array[3] = reading;
 764:	80 93 4b 01 	sts	0x014B, r24
 768:	d0 cf       	rjmp	.-96     	; 0x70a <main+0x80>
      if(nrf24_dataReady())
      {
            nrf24_getData(data_array); 	
	    if(data_array[0] == 0xFF) //warning system control
	    {
	     light_func(data_array[1]);
 76a:	80 91 49 01 	lds	r24, 0x0149
 76e:	0e 94 cf 00 	call	0x19e	; 0x19e <light_func>
	      mp3_func(CMD_PLAY_W_INDEX, data_array[2]);
 772:	60 91 4a 01 	lds	r22, 0x014A
}

void mp3_func(uint8_t cmd, uint8_t dat) //operates CATALEX MP3 Serial Board
{
  uint8_t i;
  if(dat > 0){
 776:	66 23       	and	r22, r22
 778:	21 f3       	breq	.-56     	; 0x742 <main+0xb8>
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	0e 94 75 00 	call	0xea	; 0xea <mp3_func.part.0>
 780:	e0 cf       	rjmp	.-64     	; 0x742 <main+0xb8>

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
