
swew_transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000007be  00000852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080013a  0080013a  0000088c  2**0
                  ALLOC
  3 .stab         000027e4  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ad  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee eb       	ldi	r30, 0xBE	; 190
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 33       	cpi	r26, 0x3A	; 58
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	aa e3       	ldi	r26, 0x3A	; 58
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 34       	cpi	r26, 0x41	; 65
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  e2:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <port_init>:


//*****************************
// AVR Port Initialization
void port_init(void){
  DDRB |= (1<<PB5)|(1<<PB6)|(1<<PB7); //turn on pwm
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	80 6e       	ori	r24, 0xE0	; 224
  ee:	84 b9       	out	0x04, r24	; 4
  DDRF |= 0xF0;//upper nibble of F outputs
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	80 6f       	ori	r24, 0xF0	; 240
  f4:	80 bb       	out	0x10, r24	; 16
  f6:	08 95       	ret

000000f8 <tcnt_init>:

//*****************************
// Timer/Counter Initialization
void tcnt_init(void){

  TIMSK0  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
  f8:	ee e6       	ldi	r30, 0x6E	; 110
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
  TCCR0B  |=  (1<<CS01) | (1<<CS00);  //normal mode, clock source, no prescale
 102:	85 b5       	in	r24, 0x25	; 37
 104:	83 60       	ori	r24, 0x03	; 3
 106:	85 bd       	out	0x25, r24	; 37

  //Configure TIMER1 for PWM output
  TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<COM1C1)|(1<<WGM11); //NON Inverted PWM
 108:	e0 e8       	ldi	r30, 0x80	; 128
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8a 6a       	ori	r24, 0xAA	; 170
 110:	80 83       	st	Z, r24
  TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	89 61       	ori	r24, 0x19	; 25
 11a:	80 83       	st	Z, r24

  ICR1=4999;  //fPWM=423.6Hz (Period = 2.4ms Standard). 
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	90 93 87 00 	sts	0x0087, r25
 124:	80 93 86 00 	sts	0x0086, r24
 128:	08 95       	ret

0000012a <light_em_up>:
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e8 0f       	add	r30, r24
 134:	f9 1f       	adc	r31, r25
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e6 5f       	subi	r30, 0xF6	; 246
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	84 81       	ldd	r24, Z+4	; 0x04
 140:	95 81       	ldd	r25, Z+5	; 0x05
 142:	90 93 89 00 	sts	0x0089, r25
 146:	80 93 88 00 	sts	0x0088, r24
   OCR1B= light_val[i][1];
 14a:	82 81       	ldd	r24, Z+2	; 0x02
 14c:	93 81       	ldd	r25, Z+3	; 0x03
 14e:	90 93 8b 00 	sts	0x008B, r25
 152:	80 93 8a 00 	sts	0x008A, r24
   OCR1C= light_val[i][0];
 156:	80 81       	ld	r24, Z
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	90 93 8d 00 	sts	0x008D, r25
 15e:	80 93 8c 00 	sts	0x008C, r24
 162:	08 95       	ret

00000164 <nrf24_ce_digitalWrite.part.0>:
 164:	28 9a       	sbi	0x05, 0	; 5
 166:	08 95       	ret

00000168 <nrf24_csn_digitalWrite.part.1>:
 168:	29 9a       	sbi	0x05, 1	; 5
 16a:	08 95       	ret

0000016c <nrf24_payload_length>:
 16c:	80 91 40 01 	lds	r24, 0x0140
 170:	08 95       	ret

00000172 <spi_transfer>:
 172:	2a 98       	cbi	0x05, 2	; 5
 174:	68 2f       	mov	r22, r24
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	27 e0       	ldi	r18, 0x07	; 7
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	09 c0       	rjmp	.+18     	; 0x192 <spi_transfer+0x20>
 180:	2b 98       	cbi	0x05, 3	; 5
 182:	2a 9a       	sbi	0x05, 2	; 5
 184:	88 0f       	add	r24, r24
 186:	1c 99       	sbic	0x03, 4	; 3
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	2a 98       	cbi	0x05, 2	; 5
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	31 09       	sbc	r19, r1
 190:	58 f0       	brcs	.+22     	; 0x1a8 <spi_transfer+0x36>
 192:	ab 01       	movw	r20, r22
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <spi_transfer+0x2a>
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <spi_transfer+0x26>
 1a0:	40 ff       	sbrs	r20, 0
 1a2:	ee cf       	rjmp	.-36     	; 0x180 <spi_transfer+0xe>
 1a4:	2b 9a       	sbi	0x05, 3	; 5
 1a6:	ed cf       	rjmp	.-38     	; 0x182 <spi_transfer+0x10>
 1a8:	08 95       	ret

000001aa <nrf24_payloadLength>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	1f 92       	push	r1
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	29 98       	cbi	0x05, 1	; 5
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <nrf24_getStatus>:
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	1f 92       	push	r1
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	29 98       	cbi	0x05, 1	; 5
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 1e4:	89 83       	std	Y+1, r24	; 0x01
 1e6:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <nrf24_isSending>:
 1f4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <nrf24_getStatus>
 1f8:	98 2f       	mov	r25, r24
 1fa:	90 73       	andi	r25, 0x30	; 48
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <nrf24_isSending+0xe>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret

00000204 <nrf24_lastMessageStatus>:
 204:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <nrf24_getStatus>
 208:	85 fd       	sbrc	r24, 5
 20a:	06 c0       	rjmp	.+12     	; 0x218 <nrf24_lastMessageStatus+0x14>
 20c:	84 fd       	sbrc	r24, 4
 20e:	02 c0       	rjmp	.+4      	; 0x214 <nrf24_lastMessageStatus+0x10>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	08 95       	ret
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret

0000021c <nrf24_transferSync>:
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	e4 2e       	mov	r14, r20
 22a:	44 23       	and	r20, r20
 22c:	61 f0       	breq	.+24     	; 0x246 <nrf24_transferSync+0x2a>
 22e:	8c 01       	movw	r16, r24
 230:	eb 01       	movw	r28, r22
 232:	f1 2c       	mov	r15, r1
 234:	f8 01       	movw	r30, r16
 236:	81 91       	ld	r24, Z+
 238:	8f 01       	movw	r16, r30
 23a:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 23e:	89 93       	st	Y+, r24
 240:	f3 94       	inc	r15
 242:	fe 10       	cpse	r15, r14
 244:	f7 cf       	rjmp	.-18     	; 0x234 <nrf24_transferSync+0x18>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	08 95       	ret

00000254 <nrf24_transmitSync>:
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	06 2f       	mov	r16, r22
 25e:	66 23       	and	r22, r22
 260:	41 f0       	breq	.+16     	; 0x272 <nrf24_transmitSync+0x1e>
 262:	ec 01       	movw	r28, r24
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	89 91       	ld	r24, Y+
 268:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 26c:	1f 5f       	subi	r17, 0xFF	; 255
 26e:	10 13       	cpse	r17, r16
 270:	fa cf       	rjmp	.-12     	; 0x266 <nrf24_transmitSync+0x12>
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <nrf24_configRegister>:
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	1f 92       	push	r1
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	29 98       	cbi	0x05, 1	; 5
 288:	8f 71       	andi	r24, 0x1F	; 31
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	69 83       	std	Y+1, r22	; 0x01
 28e:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 292:	69 81       	ldd	r22, Y+1	; 0x01
 294:	86 2f       	mov	r24, r22
 296:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	0c 94 b4 00 	jmp	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>

000002a4 <nrf24_getData>:
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	29 98       	cbi	0x05, 1	; 5
 2ac:	81 e6       	ldi	r24, 0x61	; 97
 2ae:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 2b2:	40 91 40 01 	lds	r20, 0x0140
 2b6:	be 01       	movw	r22, r28
 2b8:	ce 01       	movw	r24, r28
 2ba:	0e 94 0e 01 	call	0x21c	; 0x21c <nrf24_transferSync>
 2be:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 2c2:	60 e4       	ldi	r22, 0x40	; 64
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	0c 94 3e 01 	jmp	0x27c	; 0x27c <nrf24_configRegister>

000002ce <nrf24_powerUpRx>:
 2ce:	29 98       	cbi	0x05, 1	; 5
 2d0:	82 ee       	ldi	r24, 0xE2	; 226
 2d2:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 2d6:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 2da:	60 e7       	ldi	r22, 0x70	; 112
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 2e2:	28 98       	cbi	0x05, 0	; 5
 2e4:	6b e0       	ldi	r22, 0x0B	; 11
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 2ec:	0c 94 b2 00 	jmp	0x164	; 0x164 <nrf24_ce_digitalWrite.part.0>

000002f0 <nrf24_config>:
 2f0:	60 93 40 01 	sts	0x0140, r22
 2f4:	68 2f       	mov	r22, r24
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	81 e1       	ldi	r24, 0x11	; 17
 300:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 304:	60 91 40 01 	lds	r22, 0x0140
 308:	82 e1       	ldi	r24, 0x12	; 18
 30a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	83 e1       	ldi	r24, 0x13	; 19
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	84 e1       	ldi	r24, 0x14	; 20
 31a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	85 e1       	ldi	r24, 0x15	; 21
 322:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	86 e1       	ldi	r24, 0x16	; 22
 32a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 32e:	66 e0       	ldi	r22, 0x06	; 6
 330:	86 e0       	ldi	r24, 0x06	; 6
 332:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 336:	68 e0       	ldi	r22, 0x08	; 8
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 33e:	63 e0       	ldi	r22, 0x03	; 3
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 34e:	6f e4       	ldi	r22, 0x4F	; 79
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	8c e1       	ldi	r24, 0x1C	; 28
 35a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 35e:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <nrf24_powerUpRx>

00000362 <nrf24_powerUpTx>:
 362:	60 e7       	ldi	r22, 0x70	; 112
 364:	87 e0       	ldi	r24, 0x07	; 7
 366:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_configRegister>
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0c 94 3e 01 	jmp	0x27c	; 0x27c <nrf24_configRegister>

00000372 <nrf24_send>:
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	f8 2e       	mov	r15, r24
 388:	28 98       	cbi	0x05, 0	; 5
 38a:	99 83       	std	Y+1, r25	; 0x01
 38c:	0e 94 b1 01 	call	0x362	; 0x362 <nrf24_powerUpTx>
 390:	29 98       	cbi	0x05, 1	; 5
 392:	81 ee       	ldi	r24, 0xE1	; 225
 394:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 398:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 39c:	29 98       	cbi	0x05, 1	; 5
 39e:	80 ea       	ldi	r24, 0xA0	; 160
 3a0:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 3a4:	10 91 40 01 	lds	r17, 0x0140
 3a8:	99 81       	ldd	r25, Y+1	; 0x01
 3aa:	11 23       	and	r17, r17
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <nrf24_send+0x54>
 3ae:	0f 2d       	mov	r16, r15
 3b0:	cf 2c       	mov	r12, r15
 3b2:	d9 2e       	mov	r13, r25
 3b4:	f6 01       	movw	r30, r12
 3b6:	81 91       	ld	r24, Z+
 3b8:	6f 01       	movw	r12, r30
 3ba:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 3be:	8c 2d       	mov	r24, r12
 3c0:	80 1b       	sub	r24, r16
 3c2:	81 17       	cp	r24, r17
 3c4:	b8 f3       	brcs	.-18     	; 0x3b4 <nrf24_send+0x42>
 3c6:	0e 94 b4 00 	call	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	0c 94 b2 00 	jmp	0x164	; 0x164 <nrf24_ce_digitalWrite.part.0>

000003de <nrf24_powerDown>:
 3de:	28 98       	cbi	0x05, 0	; 5
 3e0:	68 e0       	ldi	r22, 0x08	; 8
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <nrf24_configRegister>

000003e8 <nrf24_readRegister>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	1f 92       	push	r1
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	8b 01       	movw	r16, r22
 3f8:	29 98       	cbi	0x05, 1	; 5
 3fa:	8f 71       	andi	r24, 0x1F	; 31
 3fc:	49 83       	std	Y+1, r20	; 0x01
 3fe:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 402:	49 81       	ldd	r20, Y+1	; 0x01
 404:	b8 01       	movw	r22, r16
 406:	c8 01       	movw	r24, r16
 408:	0e 94 0e 01 	call	0x21c	; 0x21c <nrf24_transferSync>
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	0c 94 b4 00 	jmp	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>

0000041a <nrf24_rxFifoEmpty>:
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	1f 92       	push	r1
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	87 e1       	ldi	r24, 0x17	; 23
 42e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nrf24_readRegister>
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	81 70       	andi	r24, 0x01	; 1
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <nrf24_dataReady>:
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	1f 92       	push	r1
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <nrf24_getStatus>
 44c:	86 ff       	sbrs	r24, 6
 44e:	05 c0       	rjmp	.+10     	; 0x45a <nrf24_dataReady+0x1c>
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	be 01       	movw	r22, r28
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	87 e1       	ldi	r24, 0x17	; 23
 464:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nrf24_readRegister>
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	80 95       	com	r24
 46c:	81 70       	andi	r24, 0x01	; 1
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <nrf24_retransmissionCount>:
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	1f 92       	push	r1
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	be 01       	movw	r22, r28
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nrf24_readRegister>
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	8f 70       	andi	r24, 0x0F	; 15
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <nrf24_writeRegister>:
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <nrf24_writeRegister+0xe>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	04 2f       	mov	r16, r20
 4ae:	29 98       	cbi	0x05, 1	; 5
 4b0:	8f 71       	andi	r24, 0x1F	; 31
 4b2:	80 62       	ori	r24, 0x20	; 32
 4b4:	69 83       	std	Y+1, r22	; 0x01
 4b6:	7a 83       	std	Y+2, r23	; 0x02
 4b8:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 4bc:	69 81       	ldd	r22, Y+1	; 0x01
 4be:	7a 81       	ldd	r23, Y+2	; 0x02
 4c0:	00 23       	and	r16, r16
 4c2:	51 f0       	breq	.+20     	; 0x4d8 <nrf24_writeRegister+0x3e>
 4c4:	7b 01       	movw	r14, r22
 4c6:	10 e0       	ldi	r17, 0x00	; 0
 4c8:	f7 01       	movw	r30, r14
 4ca:	81 91       	ld	r24, Z+
 4cc:	7f 01       	movw	r14, r30
 4ce:	0e 94 b9 00 	call	0x172	; 0x172 <spi_transfer>
 4d2:	1f 5f       	subi	r17, 0xFF	; 255
 4d4:	10 13       	cpse	r17, r16
 4d6:	f8 cf       	rjmp	.-16     	; 0x4c8 <nrf24_writeRegister+0x2e>
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	0c 94 b4 00 	jmp	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>

000004ec <nrf24_rx_address>:
 4ec:	28 98       	cbi	0x05, 0	; 5
 4ee:	45 e0       	ldi	r20, 0x05	; 5
 4f0:	bc 01       	movw	r22, r24
 4f2:	8b e0       	ldi	r24, 0x0B	; 11
 4f4:	0e 94 4d 02 	call	0x49a	; 0x49a <nrf24_writeRegister>
 4f8:	0c 94 b2 00 	jmp	0x164	; 0x164 <nrf24_ce_digitalWrite.part.0>

000004fc <nrf24_tx_address>:
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ec 01       	movw	r28, r24
 502:	45 e0       	ldi	r20, 0x05	; 5
 504:	bc 01       	movw	r22, r24
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	0e 94 4d 02 	call	0x49a	; 0x49a <nrf24_writeRegister>
 50c:	45 e0       	ldi	r20, 0x05	; 5
 50e:	be 01       	movw	r22, r28
 510:	80 e1       	ldi	r24, 0x10	; 16
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	0c 94 4d 02 	jmp	0x49a	; 0x49a <nrf24_writeRegister>

0000051a <nrf24_setupPins>:
 51a:	20 9a       	sbi	0x04, 0	; 4
 51c:	21 9a       	sbi	0x04, 1	; 4
 51e:	22 9a       	sbi	0x04, 2	; 4
 520:	23 9a       	sbi	0x04, 3	; 4
 522:	24 98       	cbi	0x04, 4	; 4
 524:	08 95       	ret

00000526 <nrf24_init>:
 526:	0e 94 8d 02 	call	0x51a	; 0x51a <nrf24_setupPins>
 52a:	28 98       	cbi	0x05, 0	; 5
 52c:	0c 94 b4 00 	jmp	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>

00000530 <nrf24_ce_digitalWrite>:
 530:	81 11       	cpse	r24, r1
 532:	02 c0       	rjmp	.+4      	; 0x538 <nrf24_ce_digitalWrite+0x8>
 534:	28 98       	cbi	0x05, 0	; 5
 536:	08 95       	ret
 538:	0c 94 b2 00 	jmp	0x164	; 0x164 <nrf24_ce_digitalWrite.part.0>

0000053c <nrf24_csn_digitalWrite>:
 53c:	81 11       	cpse	r24, r1
 53e:	02 c0       	rjmp	.+4      	; 0x544 <nrf24_csn_digitalWrite+0x8>
 540:	29 98       	cbi	0x05, 1	; 5
 542:	08 95       	ret
 544:	0c 94 b4 00 	jmp	0x168	; 0x168 <nrf24_csn_digitalWrite.part.1>

00000548 <nrf24_sck_digitalWrite>:
 548:	81 11       	cpse	r24, r1
 54a:	02 c0       	rjmp	.+4      	; 0x550 <nrf24_sck_digitalWrite+0x8>
 54c:	2a 98       	cbi	0x05, 2	; 5
 54e:	08 95       	ret
 550:	2a 9a       	sbi	0x05, 2	; 5
 552:	08 95       	ret

00000554 <nrf24_mosi_digitalWrite>:
 554:	81 11       	cpse	r24, r1
 556:	02 c0       	rjmp	.+4      	; 0x55c <nrf24_mosi_digitalWrite+0x8>
 558:	2b 98       	cbi	0x05, 3	; 5
 55a:	08 95       	ret
 55c:	2b 9a       	sbi	0x05, 3	; 5
 55e:	08 95       	ret

00000560 <nrf24_miso_digitalRead>:
 560:	83 b1       	in	r24, 0x03	; 3
 562:	80 71       	andi	r24, 0x10	; 16
 564:	08 95       	ret

00000566 <uart_init>:
 566:	88 e4       	ldi	r24, 0x48	; 72
 568:	8a b9       	out	0x0a, r24	; 10
 56a:	10 92 cd 00 	sts	0x00CD, r1
 56e:	83 e3       	ldi	r24, 0x33	; 51
 570:	80 93 cc 00 	sts	0x00CC, r24
 574:	10 92 c8 00 	sts	0x00C8, r1
 578:	88 e1       	ldi	r24, 0x18	; 24
 57a:	80 93 c9 00 	sts	0x00C9, r24
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	80 93 ca 00 	sts	0x00CA, r24
 584:	08 95       	ret

00000586 <uart_putc>:
 586:	90 91 c8 00 	lds	r25, 0x00C8
 58a:	95 ff       	sbrs	r25, 5
 58c:	fc cf       	rjmp	.-8      	; 0x586 <uart_putc>
 58e:	80 93 ce 00 	sts	0x00CE, r24
 592:	08 95       	ret

00000594 <uart_puts>:
 594:	fc 01       	movw	r30, r24
 596:	20 81       	ld	r18, Z
 598:	22 23       	and	r18, r18
 59a:	51 f0       	breq	.+20     	; 0x5b0 <uart_puts+0x1c>
 59c:	31 96       	adiw	r30, 0x01	; 1
 59e:	80 91 c8 00 	lds	r24, 0x00C8
 5a2:	85 ff       	sbrs	r24, 5
 5a4:	fc cf       	rjmp	.-8      	; 0x59e <uart_puts+0xa>
 5a6:	20 93 ce 00 	sts	0x00CE, r18
 5aa:	21 91       	ld	r18, Z+
 5ac:	21 11       	cpse	r18, r1
 5ae:	f7 cf       	rjmp	.-18     	; 0x59e <uart_puts+0xa>
 5b0:	08 95       	ret

000005b2 <uart_getc>:
 5b2:	80 91 c8 00 	lds	r24, 0x00C8
 5b6:	87 ff       	sbrs	r24, 7
 5b8:	fc cf       	rjmp	.-8      	; 0x5b2 <uart_getc>
 5ba:	80 91 ce 00 	lds	r24, 0x00CE
 5be:	08 95       	ret

000005c0 <uart_gets>:
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	20 91 c8 00 	lds	r18, 0x00C8
 5c6:	27 ff       	sbrs	r18, 7
 5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <uart_gets+0x2>
 5ca:	20 91 ce 00 	lds	r18, 0x00CE
 5ce:	fc 01       	movw	r30, r24
 5d0:	e3 0f       	add	r30, r19
 5d2:	f1 1d       	adc	r31, r1
 5d4:	20 83       	st	Z, r18
 5d6:	3f 5f       	subi	r19, 0xFF	; 255
 5d8:	2a 30       	cpi	r18, 0x0A	; 10
 5da:	11 f0       	breq	.+4      	; 0x5e0 <uart_gets+0x20>
 5dc:	2d 30       	cpi	r18, 0x0D	; 13
 5de:	89 f7       	brne	.-30     	; 0x5c2 <uart_gets+0x2>
 5e0:	fc 01       	movw	r30, r24
 5e2:	e3 0f       	add	r30, r19
 5e4:	f1 1d       	adc	r31, r1
 5e6:	10 82       	st	Z, r1
 5e8:	08 95       	ret

000005ea <main>:
//slow down clock for low-voltage performance 
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))
#define CPU_8MHz        0x01

int main(void){
 CPU_PRESCALE(CPU_8MHz);
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	80 93 61 00 	sts	0x0061, r24
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 61 00 	sts	0x0061, r24


//*****************************
// AVR Port Initialization
void port_init(void){
  DDRB |= (1<<PB5)|(1<<PB6)|(1<<PB7); //turn on pwm
 5f6:	84 b1       	in	r24, 0x04	; 4
 5f8:	80 6e       	ori	r24, 0xE0	; 224
 5fa:	84 b9       	out	0x04, r24	; 4
  DDRF |= 0xF0;//upper nibble of F outputs
 5fc:	80 b3       	in	r24, 0x10	; 16
 5fe:	80 6f       	ori	r24, 0xF0	; 240
 600:	80 bb       	out	0x10, r24	; 16

int main(void){
 CPU_PRESCALE(CPU_8MHz);

 port_init();
 tcnt_init();
 602:	0e 94 7c 00 	call	0xf8	; 0xf8 <tcnt_init>
 uart_init();
 606:	0e 94 b3 02 	call	0x566	; 0x566 <uart_init>
 nrf24_init();
 60a:	0e 94 93 02 	call	0x526	; 0x526 <nrf24_init>
 nrf24_config(21,4); //channel #21, payload length 4
 60e:	64 e0       	ldi	r22, 0x04	; 4
 610:	85 e1       	ldi	r24, 0x15	; 21
 612:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nrf24_config>

 nrf24_tx_address(tx_address);
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <nrf24_tx_address>
 nrf24_rx_address(rx_address);
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 76 02 	call	0x4ec	; 0x4ec <nrf24_rx_address>

 uint8_t start,light, track, snow; //for uart
 uint16_t timeout;
 while(1){ //serial forever

  start = uart_getc();//wait for start byte
 626:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 62a:	c8 2f       	mov	r28, r24
  light = uart_getc();
 62c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 630:	d8 2f       	mov	r29, r24
  if(light == 5){light_em_up(BLUE);}
 632:	85 30       	cpi	r24, 0x05	; 5
 634:	09 f4       	brne	.+2      	; 0x638 <main+0x4e>
 636:	67 c0       	rjmp	.+206    	; 0x706 <main+0x11c>
  else if(light == 6){light_em_up(YELLOW);}
 638:	86 30       	cpi	r24, 0x06	; 6
 63a:	09 f4       	brne	.+2      	; 0x63e <main+0x54>
 63c:	88 c0       	rjmp	.+272    	; 0x74e <main+0x164>
  else if(light == 7){light_em_up(RED);}
 63e:	87 30       	cpi	r24, 0x07	; 7
 640:	09 f4       	brne	.+2      	; 0x644 <main+0x5a>
 642:	9e c0       	rjmp	.+316    	; 0x780 <main+0x196>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 644:	20 91 38 01 	lds	r18, 0x0138
 648:	30 91 39 01 	lds	r19, 0x0139
 64c:	30 93 89 00 	sts	0x0089, r19
 650:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 654:	20 91 36 01 	lds	r18, 0x0136
 658:	30 91 37 01 	lds	r19, 0x0137
 65c:	30 93 8b 00 	sts	0x008B, r19
 660:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 664:	20 91 34 01 	lds	r18, 0x0134
 668:	30 91 35 01 	lds	r19, 0x0135
 66c:	30 93 8d 00 	sts	0x008D, r19
 670:	20 93 8c 00 	sts	0x008C, r18
  if(light == 5){light_em_up(BLUE);}
  else if(light == 6){light_em_up(YELLOW);}
  else if(light == 7){light_em_up(RED);}
  else{light_em_up(7);}

  track = uart_getc();
 674:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 678:	08 2f       	mov	r16, r24
  snow = uart_getc();
 67a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 67e:	18 2f       	mov	r17, r24

	//*****************************
        // Radio Operation
        /* Fill the data buffer */
        data_array[0] = start;
 680:	c0 93 3c 01 	sts	0x013C, r28
        data_array[1] = light;
 684:	d0 93 3d 01 	sts	0x013D, r29
        data_array[2] = track;
 688:	00 93 3e 01 	sts	0x013E, r16
        data_array[3] = snow;
 68c:	80 93 3f 01 	sts	0x013F, r24
 /* Automatically goes to TX mode */
        nrf24_send(data_array);        
 690:	8c e3       	ldi	r24, 0x3C	; 60
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	0e 94 b9 01 	call	0x372	; 0x372 <nrf24_send>
        
        /* Wait for transmission to end */
        while(nrf24_isSending());
 698:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <nrf24_isSending>
 69c:	81 11       	cpse	r24, r1
 69e:	fc cf       	rjmp	.-8      	; 0x698 <main+0xae>
        
        /* Make analysis on last tranmission attempt */
        temp = nrf24_lastMessageStatus();	      
 6a0:	0e 94 02 01 	call	0x204	; 0x204 <nrf24_lastMessageStatus>
 6a4:	80 93 3b 01 	sts	0x013B, r24
        
        if(temp == NRF24_TRANSMISSON_OK)
 6a8:	88 23       	and	r24, r24
 6aa:	09 f4       	brne	.+2      	; 0x6ae <main+0xc4>
 6ac:	45 c0       	rjmp	.+138    	; 0x738 <main+0x14e>
        {                    
            uart_putc('O'); //O for ok
        }
        else if(temp == NRF24_MESSAGE_LOST)
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <main+0xca>
 6b2:	7f c0       	rjmp	.+254    	; 0x7b2 <main+0x1c8>
            uart_putc('L'); //L for lost
        }
       // else{uart_putc('N');} //N for no response

	/* Retranmission count indicates the tranmission quality */
	temp = nrf24_retransmissionCount();
 6b4:	0e 94 3b 02 	call	0x476	; 0x476 <nrf24_retransmissionCount>
 6b8:	80 93 3b 01 	sts	0x013B, r24
     // uart_putc(temp); //send the quality

      nrf24_powerUpRx();
 6bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <nrf24_powerUpRx>
   
      while(!nrf24_dataReady()){if(timeout>2000){break;} timeout++;} //wait for transmission
 6c0:	c2 ed       	ldi	r28, 0xD2	; 210
 6c2:	d7 e0       	ldi	r29, 0x07	; 7
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <main+0xe2>
 6c6:	21 97       	sbiw	r28, 0x01	; 1
 6c8:	20 97       	sbiw	r28, 0x00	; 0
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <main+0xea>
 6cc:	0e 94 1f 02 	call	0x43e	; 0x43e <nrf24_dataReady>
 6d0:	88 23       	and	r24, r24
 6d2:	c9 f3       	breq	.-14     	; 0x6c6 <main+0xdc>
      if(nrf24_dataReady()){nrf24_getData(data_array); snow = data_array[3];} //loads data array
 6d4:	0e 94 1f 02 	call	0x43e	; 0x43e <nrf24_dataReady>
 6d8:	81 11       	cpse	r24, r1
 6da:	32 c0       	rjmp	.+100    	; 0x740 <main+0x156>
      timeout = 0;

      uart_putc(snow); 
 6dc:	81 2f       	mov	r24, r17
 6de:	0e 94 c3 02 	call	0x586	; 0x586 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e2:	2f e9       	ldi	r18, 0x9F	; 159
 6e4:	86 e8       	ldi	r24, 0x86	; 134
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	21 50       	subi	r18, 0x01	; 1
 6ea:	80 40       	sbci	r24, 0x00	; 0
 6ec:	90 40       	sbci	r25, 0x00	; 0
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <main+0xfe>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <main+0x108>
 6f2:	00 00       	nop

 uint8_t start,light, track, snow; //for uart
 uint16_t timeout;
 while(1){ //serial forever

  start = uart_getc();//wait for start byte
 6f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 6f8:	c8 2f       	mov	r28, r24
  light = uart_getc();
 6fa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_getc>
 6fe:	d8 2f       	mov	r29, r24
  if(light == 5){light_em_up(BLUE);}
 700:	85 30       	cpi	r24, 0x05	; 5
 702:	09 f0       	breq	.+2      	; 0x706 <main+0x11c>
 704:	99 cf       	rjmp	.-206    	; 0x638 <main+0x4e>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 706:	20 91 20 01 	lds	r18, 0x0120
 70a:	30 91 21 01 	lds	r19, 0x0121
 70e:	30 93 89 00 	sts	0x0089, r19
 712:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 716:	20 91 1e 01 	lds	r18, 0x011E
 71a:	30 91 1f 01 	lds	r19, 0x011F
 71e:	30 93 8b 00 	sts	0x008B, r19
 722:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 726:	20 91 1c 01 	lds	r18, 0x011C
 72a:	30 91 1d 01 	lds	r19, 0x011D
 72e:	30 93 8d 00 	sts	0x008D, r19
 732:	20 93 8c 00 	sts	0x008C, r18
 736:	9e cf       	rjmp	.-196    	; 0x674 <main+0x8a>
        /* Make analysis on last tranmission attempt */
        temp = nrf24_lastMessageStatus();	      
        
        if(temp == NRF24_TRANSMISSON_OK)
        {                    
            uart_putc('O'); //O for ok
 738:	8f e4       	ldi	r24, 0x4F	; 79
 73a:	0e 94 c3 02 	call	0x586	; 0x586 <uart_putc>
 73e:	ba cf       	rjmp	.-140    	; 0x6b4 <main+0xca>
     // uart_putc(temp); //send the quality

      nrf24_powerUpRx();
   
      while(!nrf24_dataReady()){if(timeout>2000){break;} timeout++;} //wait for transmission
      if(nrf24_dataReady()){nrf24_getData(data_array); snow = data_array[3];} //loads data array
 740:	8c e3       	ldi	r24, 0x3C	; 60
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 52 01 	call	0x2a4	; 0x2a4 <nrf24_getData>
 748:	10 91 3f 01 	lds	r17, 0x013F
 74c:	c7 cf       	rjmp	.-114    	; 0x6dc <main+0xf2>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 74e:	20 91 14 01 	lds	r18, 0x0114
 752:	30 91 15 01 	lds	r19, 0x0115
 756:	30 93 89 00 	sts	0x0089, r19
 75a:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 75e:	20 91 12 01 	lds	r18, 0x0112
 762:	30 91 13 01 	lds	r19, 0x0113
 766:	30 93 8b 00 	sts	0x008B, r19
 76a:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 76e:	20 91 10 01 	lds	r18, 0x0110
 772:	30 91 11 01 	lds	r19, 0x0111
 776:	30 93 8d 00 	sts	0x008D, r19
 77a:	20 93 8c 00 	sts	0x008C, r18
 77e:	7a cf       	rjmp	.-268    	; 0x674 <main+0x8a>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 780:	80 91 0e 01 	lds	r24, 0x010E
 784:	90 91 0f 01 	lds	r25, 0x010F
 788:	90 93 89 00 	sts	0x0089, r25
 78c:	80 93 88 00 	sts	0x0088, r24
   OCR1B= light_val[i][1];
 790:	20 91 0c 01 	lds	r18, 0x010C
 794:	30 91 0d 01 	lds	r19, 0x010D
 798:	30 93 8b 00 	sts	0x008B, r19
 79c:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 7a0:	20 91 0a 01 	lds	r18, 0x010A
 7a4:	30 91 0b 01 	lds	r19, 0x010B
 7a8:	30 93 8d 00 	sts	0x008D, r19
 7ac:	20 93 8c 00 	sts	0x008C, r18
 7b0:	61 cf       	rjmp	.-318    	; 0x674 <main+0x8a>
        {                    
            uart_putc('O'); //O for ok
        }
        else if(temp == NRF24_MESSAGE_LOST)
        {                    
            uart_putc('L'); //L for lost
 7b2:	8c e4       	ldi	r24, 0x4C	; 76
 7b4:	0e 94 c3 02 	call	0x586	; 0x586 <uart_putc>
 7b8:	7d cf       	rjmp	.-262    	; 0x6b4 <main+0xca>

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
