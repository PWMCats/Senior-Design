
swew_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800132  00800132  0000053e  2**0
                  ALLOC
  3 .stab         00001650  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e13  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e7       	ldi	r30, 0x78	; 120
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 33       	cpi	r26, 0x32	; 50
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a2 e3       	ldi	r26, 0x32	; 50
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 33       	cpi	r26, 0x34	; 52
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  e2:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adc_init>:
uint8_t reading;
//*****************************
// ADC Initialization
void adc_init(void){

  ADCSRA  |= (1<< ADEN);//adc enabled
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
  ADMUX |= (1<< ADLAR) | (1<<REFS0);//left justify, use 5v reference
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 66       	ori	r24, 0x60	; 96
  fc:	80 83       	st	Z, r24
  ADCSRB |= (1<<MUX5); // use ADC8 on PD4, free running mode
  fe:	eb e7       	ldi	r30, 0x7B	; 123
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <port_init>:
//*****************************
// PORT Initialization
void port_init(void){

  //Init PORTD to turn on lights
  DDRB |= 0xFF;
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1<<PD7)|(1<<PD6)|(1<<PD5); //set light pins to output
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	80 6e       	ori	r24, 0xE0	; 224
 114:	8a b9       	out	0x0a, r24	; 10
  DDRF |= (1<<PF7); //set pin 7 to output for snowfall
 116:	87 9a       	sbi	0x10, 7	; 16
 118:	08 95       	ret

0000011a <tcnt_init>:

//*****************************
// Timer/Counter Initialization
void tcnt_init(void){

  TIMSK0  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
  TCCR0B  |=  (1<<CS01) | (1<<CS00);  //normal mode, clock source, no prescale
 124:	85 b5       	in	r24, 0x25	; 37
 126:	83 60       	ori	r24, 0x03	; 3
 128:	85 bd       	out	0x25, r24	; 37

  //Configure TIMER1 for PWM output
  TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<COM1C1)|(1<<WGM11); //NON Inverted PWM
 12a:	e0 e8       	ldi	r30, 0x80	; 128
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8a 6a       	ori	r24, 0xAA	; 170
 132:	80 83       	st	Z, r24
  TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 134:	e1 e8       	ldi	r30, 0x81	; 129
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	89 61       	ori	r24, 0x19	; 25
 13c:	80 83       	st	Z, r24

  ICR1=4999;  //fPWM=423.6Hz (Period = 2.4ms Standard). 
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	93 e1       	ldi	r25, 0x13	; 19
 142:	90 93 87 00 	sts	0x0087, r25
 146:	80 93 86 00 	sts	0x0086, r24
 14a:	08 95       	ret

0000014c <light_em_up>:
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e8 0f       	add	r30, r24
 156:	f9 1f       	adc	r31, r25
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ef 5f       	subi	r30, 0xFF	; 255
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	95 81       	ldd	r25, Z+5	; 0x05
 164:	90 93 89 00 	sts	0x0089, r25
 168:	80 93 88 00 	sts	0x0088, r24
   OCR1B= light_val[i][1];
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	93 81       	ldd	r25, Z+3	; 0x03
 170:	90 93 8b 00 	sts	0x008B, r25
 174:	80 93 8a 00 	sts	0x008A, r24
   OCR1C= light_val[i][0];
 178:	80 81       	ld	r24, Z
 17a:	91 81       	ldd	r25, Z+1	; 0x01
 17c:	90 93 8d 00 	sts	0x008D, r25
 180:	80 93 8c 00 	sts	0x008C, r24
 184:	08 95       	ret

00000186 <light_func>:
/* ------------------------------------------------------------------------- */

void light_func(uint8_t new_light) //latches Federal Signal circuit
{  //toggles based on state
   static uint8_t old_light;         
   if((new_light == 0) && (old_light !=0)){
 186:	81 11       	cpse	r24, r1
 188:	05 c0       	rjmp	.+10     	; 0x194 <light_func+0xe>
 18a:	20 91 32 01 	lds	r18, 0x0132
 18e:	21 11       	cpse	r18, r1
 190:	2a c0       	rjmp	.+84     	; 0x1e6 <light_func+0x60>
 192:	08 95       	ret
    set_bit(DDRD, old_light); 
    set_bit(PORTD, old_light); 
    old_light = 0;
   } //turn light off
   else{
    if(old_light != new_light){
 194:	40 91 32 01 	lds	r20, 0x0132
 198:	48 17       	cp	r20, r24
 19a:	d9 f3       	breq	.-10     	; 0x192 <light_func+0xc>
     set_bit(DDRD,  old_light);
 19c:	9a b1       	in	r25, 0x0a	; 10
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <light_func+0x24>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	4a 95       	dec	r20
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <light_func+0x20>
 1ae:	96 2b       	or	r25, r22
 1b0:	9a b9       	out	0x0a, r25	; 10
     set_bit(PORTD, old_light); 
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	a9 01       	movw	r20, r18
 1b6:	00 90 32 01 	lds	r0, 0x0132
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <light_func+0x3a>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <light_func+0x36>
 1c4:	94 2b       	or	r25, r20
 1c6:	9b b9       	out	0x0b, r25	; 11
     set_bit(DDRD,  new_light); 
 1c8:	9a b1       	in	r25, 0x0a	; 10
 1ca:	08 2e       	mov	r0, r24
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <light_func+0x4a>
 1ce:	22 0f       	add	r18, r18
 1d0:	0a 94       	dec	r0
 1d2:	ea f7       	brpl	.-6      	; 0x1ce <light_func+0x48>
 1d4:	92 2b       	or	r25, r18
 1d6:	9a b9       	out	0x0a, r25	; 10
     clr_bit(PORTD, new_light); 
 1d8:	9b b1       	in	r25, 0x0b	; 11
 1da:	20 95       	com	r18
 1dc:	29 23       	and	r18, r25
 1de:	2b b9       	out	0x0b, r18	; 11
     old_light = new_light;
 1e0:	80 93 32 01 	sts	0x0132, r24
 1e4:	08 95       	ret

void light_func(uint8_t new_light) //latches Federal Signal circuit
{  //toggles based on state
   static uint8_t old_light;         
   if((new_light == 0) && (old_light !=0)){
    set_bit(DDRD, old_light); 
 1e6:	4a b1       	in	r20, 0x0a	; 10
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	bc 01       	movw	r22, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <light_func+0x6e>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	2a 95       	dec	r18
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <light_func+0x6a>
 1f8:	46 2b       	or	r20, r22
 1fa:	4a b9       	out	0x0a, r20	; 10
    set_bit(PORTD, old_light); 
 1fc:	2b b1       	in	r18, 0x0b	; 11
 1fe:	00 90 32 01 	lds	r0, 0x0132
 202:	02 c0       	rjmp	.+4      	; 0x208 <light_func+0x82>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <light_func+0x7e>
 20c:	28 2b       	or	r18, r24
 20e:	2b b9       	out	0x0b, r18	; 11
    old_light = 0;
 210:	10 92 32 01 	sts	0x0132, r1
 214:	08 95       	ret

00000216 <mp3_func>:
   } 
}

void mp3_func(uint8_t cmd, uint8_t dat) 
{
  clr_bit(PORTB, (dat-1));
 216:	25 b1       	in	r18, 0x05	; 5
 218:	61 50       	subi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	06 2e       	mov	r0, r22
 220:	01 c0       	rjmp	.+2      	; 0x224 <mp3_func+0xe>
 222:	88 0f       	add	r24, r24
 224:	0a 94       	dec	r0
 226:	ea f7       	brpl	.-6      	; 0x222 <mp3_func+0xc>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	85 b9       	out	0x05, r24	; 5
 22e:	08 95       	ret

00000230 <uart_init>:
#define UART_BAUDRATE 9600
#define BAUDVALUE  ((F_OSC/(UART_BAUDRATE * 16UL)) - 1 )

void uart_init(void)
{
  DDRD = 0b01001000;
 230:	88 e4       	ldi	r24, 0x48	; 72
 232:	8a b9       	out	0x0a, r24	; 10
	// set baud rate
	unsigned int baud = BAUDVALUE;

  //UBBR is a 12 bit value so splits across two registers.
	UBRR1H = (unsigned char) (baud >> 8 );
 234:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)baud;
 238:	83 e3       	ldi	r24, 0x33	; 51
 23a:	80 93 cc 00 	sts	0x00CC, r24

	UCSR1A = (0<<U2X1); //normal speed
 23e:	10 92 c8 00 	sts	0x00C8, r1

	// enable receiver and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	80 93 c9 00 	sts	0x00C9, r24

	// Asynchronous, NO parity, 8 bit data, 1 stop bit
	UCSR1C = (0<< UMSEL11) | (0<<UMSEL10) | (0<<UPM11) | (0<<UPM10) | (1<<UCSZ11) | (1<<UCSZ10);
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	80 93 ca 00 	sts	0x00CA, r24
 24e:	08 95       	ret

00000250 <uart_putc>:
}

void uart_putc( uint8_t data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 250:	90 91 c8 00 	lds	r25, 0x00C8
 254:	95 ff       	sbrs	r25, 5
 256:	fc cf       	rjmp	.-8      	; 0x250 <uart_putc>
	;

	// put data into buffer, sends data
	UDR1 = data;
 258:	80 93 ce 00 	sts	0x00CE, r24
 25c:	08 95       	ret

0000025e <uart_puts>:
}

void uart_puts(char* input){
	int i =0;
	while(input[i] != '\0'){
 25e:	fc 01       	movw	r30, r24
 260:	20 81       	ld	r18, Z
 262:	22 23       	and	r18, r18
 264:	51 f0       	breq	.+20     	; 0x27a <uart_puts+0x1c>
 266:	31 96       	adiw	r30, 0x01	; 1
}

void uart_putc( uint8_t data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 268:	80 91 c8 00 	lds	r24, 0x00C8
 26c:	85 ff       	sbrs	r24, 5
 26e:	fc cf       	rjmp	.-8      	; 0x268 <uart_puts+0xa>
	;

	// put data into buffer, sends data
	UDR1 = data;
 270:	20 93 ce 00 	sts	0x00CE, r18
}

void uart_puts(char* input){
	int i =0;
	while(input[i] != '\0'){
 274:	21 91       	ld	r18, Z+
 276:	21 11       	cpse	r18, r1
 278:	f7 cf       	rjmp	.-18     	; 0x268 <uart_puts+0xa>
 27a:	08 95       	ret

0000027c <uart_getc>:
	}
}

uint8_t uart_getc(void){
    //wait for unread data to show up in receive buffer
    while(!(UCSR1A & (1<<RXC1)));
 27c:	80 91 c8 00 	lds	r24, 0x00C8
 280:	87 ff       	sbrs	r24, 7
 282:	fc cf       	rjmp	.-8      	; 0x27c <uart_getc>
    //return the data in receive buffer.
    return UDR1;
 284:	80 91 ce 00 	lds	r24, 0x00CE
}
 288:	08 95       	ret

0000028a <uart_gets>:
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	20 91 c8 00 	lds	r18, 0x00C8
 290:	27 ff       	sbrs	r18, 7
 292:	fc cf       	rjmp	.-8      	; 0x28c <uart_gets+0x2>
 294:	20 91 ce 00 	lds	r18, 0x00CE
 298:	fc 01       	movw	r30, r24
 29a:	e3 0f       	add	r30, r19
 29c:	f1 1d       	adc	r31, r1
 29e:	20 83       	st	Z, r18
 2a0:	3f 5f       	subi	r19, 0xFF	; 255
 2a2:	2a 30       	cpi	r18, 0x0A	; 10
 2a4:	11 f0       	breq	.+4      	; 0x2aa <uart_gets+0x20>
 2a6:	2d 30       	cpi	r18, 0x0D	; 13
 2a8:	89 f7       	brne	.-30     	; 0x28c <uart_gets+0x2>
 2aa:	fc 01       	movw	r30, r24
 2ac:	e3 0f       	add	r30, r19
 2ae:	f1 1d       	adc	r31, r1
 2b0:	10 82       	st	Z, r1
 2b2:	08 95       	ret

000002b4 <main>:

//MAIN
//*****************************//*****************************
int main()
{
    CPU_PRESCALE(CPU_8MHz);
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	80 93 61 00 	sts	0x0061, r24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 61 00 	sts	0x0061, r24
//*****************************
// PORT Initialization
void port_init(void){

  //Init PORTD to turn on lights
  DDRB |= 0xFF;
 2c0:	84 b1       	in	r24, 0x04	; 4
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1<<PD7)|(1<<PD6)|(1<<PD5); //set light pins to output
 2c6:	8a b1       	in	r24, 0x0a	; 10
 2c8:	80 6e       	ori	r24, 0xE0	; 224
 2ca:	8a b9       	out	0x0a, r24	; 10
  DDRF |= (1<<PF7); //set pin 7 to output for snowfall
 2cc:	87 9a       	sbi	0x10, 7	; 16
int main()
{
    CPU_PRESCALE(CPU_8MHz);
    port_init();
    //deactivate relay (it's active low)
    PORTD |= 0xE0;
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	80 6e       	ori	r24, 0xE0	; 224
 2d2:	8b b9       	out	0x0b, r24	; 11
uint8_t reading;
//*****************************
// ADC Initialization
void adc_init(void){

  ADCSRA  |= (1<< ADEN);//adc enabled
 2d4:	80 91 7a 00 	lds	r24, 0x007A
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	80 93 7a 00 	sts	0x007A, r24
  ADMUX |= (1<< ADLAR) | (1<<REFS0);//left justify, use 5v reference
 2de:	80 91 7c 00 	lds	r24, 0x007C
 2e2:	80 66       	ori	r24, 0x60	; 96
 2e4:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB |= (1<<MUX5); // use ADC8 on PD4, free running mode
 2e8:	80 91 7b 00 	lds	r24, 0x007B
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	80 93 7b 00 	sts	0x007B, r24
    CPU_PRESCALE(CPU_8MHz);
    port_init();
    //deactivate relay (it's active low)
    PORTD |= 0xE0;
    adc_init(); 
    uart_init();
 2f2:	0e 94 18 01 	call	0x230	; 0x230 <uart_init>
   } 
}

void mp3_func(uint8_t cmd, uint8_t dat) 
{
  clr_bit(PORTB, (dat-1));
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	85 b9       	out	0x05, r24	; 5
    //deactivate relay (it's active low)
    PORTD |= 0xE0;
    adc_init(); 
    uart_init();
    mp3_func(CMD_SET_VOLUME, MAX_VOL);
    tcnt_init();
 2fa:	0e 94 8d 00 	call	0x11a	; 0x11a <tcnt_init>
   } 
}

void mp3_func(uint8_t cmd, uint8_t dat) 
{
  clr_bit(PORTB, (dat-1));
 2fe:	c1 e0       	ldi	r28, 0x01	; 1
 300:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t start,light, track, snow; //for uart
    static uint8_t timeout;

   while(1)
   {    
	  start = uart_getc();//wait for start byte
 302:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 306:	18 2f       	mov	r17, r24
	  light = uart_getc();
 308:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 30c:	08 2f       	mov	r16, r24
	  if(light == 5){light_em_up(BLUE);}
 30e:	85 30       	cpi	r24, 0x05	; 5
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x60>
 312:	4e c0       	rjmp	.+156    	; 0x3b0 <main+0xfc>
	  else if(light == 6){light_em_up(YELLOW);}
 314:	86 30       	cpi	r24, 0x06	; 6
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x66>
 318:	7b c0       	rjmp	.+246    	; 0x410 <main+0x15c>
	  else if(light == 7){light_em_up(RED);}
 31a:	87 30       	cpi	r24, 0x07	; 7
 31c:	09 f4       	brne	.+2      	; 0x320 <main+0x6c>
 31e:	91 c0       	rjmp	.+290    	; 0x442 <main+0x18e>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 320:	20 91 2f 01 	lds	r18, 0x012F
 324:	30 91 30 01 	lds	r19, 0x0130
 328:	30 93 89 00 	sts	0x0089, r19
 32c:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 330:	20 91 2d 01 	lds	r18, 0x012D
 334:	30 91 2e 01 	lds	r19, 0x012E
 338:	30 93 8b 00 	sts	0x008B, r19
 33c:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 340:	20 91 2b 01 	lds	r18, 0x012B
 344:	30 91 2c 01 	lds	r19, 0x012C
 348:	30 93 8d 00 	sts	0x008D, r19
 34c:	20 93 8c 00 	sts	0x008C, r18
	  if(light == 5){light_em_up(BLUE);}
	  else if(light == 6){light_em_up(YELLOW);}
	  else if(light == 7){light_em_up(RED);}
	  else{light_em_up(7);}

	  track = uart_getc();
 350:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 354:	e8 2e       	mov	r14, r24
	  snow = uart_getc();
 356:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 35a:	f8 2e       	mov	r15, r24

	    if(start == 0xFF) //warning system control
 35c:	1f 3f       	cpi	r17, 0xFF	; 255
 35e:	09 f4       	brne	.+2      	; 0x362 <main+0xae>
 360:	48 c0       	rjmp	.+144    	; 0x3f2 <main+0x13e>
	    {
	     light_func(light);
	      mp3_func(CMD_PLAY_W_INDEX, track);
            }
  	    if(snow) //snow check is set
 362:	ff 20       	and	r15, r15
 364:	69 f0       	breq	.+26     	; 0x380 <main+0xcc>
	    { 
	     ADCSRA |= 1<<ADSC; //request value
 366:	80 91 7a 00 	lds	r24, 0x007A
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 93 7a 00 	sts	0x007A, r24
	     while (bit_is_clear(ADCSRA, ADIF)){} //shouldn't take long
 370:	80 91 7a 00 	lds	r24, 0x007A
 374:	84 ff       	sbrs	r24, 4
 376:	fc cf       	rjmp	.-8      	; 0x370 <main+0xbc>
	     reading = ADCH;
 378:	f0 90 79 00 	lds	r15, 0x0079
 37c:	f0 92 33 01 	sts	0x0133, r15
  	     snow = reading;
	    }
        
        uart_putc('O');
 380:	8f e4       	ldi	r24, 0x4F	; 79
 382:	0e 94 28 01 	call	0x250	; 0x250 <uart_putc>
        uart_putc(snow); 
 386:	8f 2d       	mov	r24, r15
 388:	0e 94 28 01 	call	0x250	; 0x250 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	2f e9       	ldi	r18, 0x9F	; 159
 38e:	86 e8       	ldi	r24, 0x86	; 134
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0xde>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0xe8>
 39c:	00 00       	nop
    uint8_t start,light, track, snow; //for uart
    static uint8_t timeout;

   while(1)
   {    
	  start = uart_getc();//wait for start byte
 39e:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 3a2:	18 2f       	mov	r17, r24
	  light = uart_getc();
 3a4:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 3a8:	08 2f       	mov	r16, r24
	  if(light == 5){light_em_up(BLUE);}
 3aa:	85 30       	cpi	r24, 0x05	; 5
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0xfc>
 3ae:	b2 cf       	rjmp	.-156    	; 0x314 <main+0x60>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 3b0:	20 91 17 01 	lds	r18, 0x0117
 3b4:	30 91 18 01 	lds	r19, 0x0118
 3b8:	30 93 89 00 	sts	0x0089, r19
 3bc:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 3c0:	20 91 15 01 	lds	r18, 0x0115
 3c4:	30 91 16 01 	lds	r19, 0x0116
 3c8:	30 93 8b 00 	sts	0x008B, r19
 3cc:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 3d0:	20 91 13 01 	lds	r18, 0x0113
 3d4:	30 91 14 01 	lds	r19, 0x0114
 3d8:	30 93 8d 00 	sts	0x008D, r19
 3dc:	20 93 8c 00 	sts	0x008C, r18
	  if(light == 5){light_em_up(BLUE);}
	  else if(light == 6){light_em_up(YELLOW);}
	  else if(light == 7){light_em_up(RED);}
	  else{light_em_up(7);}

	  track = uart_getc();
 3e0:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 3e4:	e8 2e       	mov	r14, r24
	  snow = uart_getc();
 3e6:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 3ea:	f8 2e       	mov	r15, r24

	    if(start == 0xFF) //warning system control
 3ec:	1f 3f       	cpi	r17, 0xFF	; 255
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x13e>
 3f0:	b8 cf       	rjmp	.-144    	; 0x362 <main+0xae>
	    {
	     light_func(light);
 3f2:	80 2f       	mov	r24, r16
 3f4:	0e 94 c3 00 	call	0x186	; 0x186 <light_func>
   } 
}

void mp3_func(uint8_t cmd, uint8_t dat) 
{
  clr_bit(PORTB, (dat-1));
 3f8:	85 b1       	in	r24, 0x05	; 5
 3fa:	ea 94       	dec	r14
 3fc:	9e 01       	movw	r18, r28
 3fe:	0e 2c       	mov	r0, r14
 400:	01 c0       	rjmp	.+2      	; 0x404 <main+0x150>
 402:	22 0f       	add	r18, r18
 404:	0a 94       	dec	r0
 406:	ea f7       	brpl	.-6      	; 0x402 <main+0x14e>
 408:	20 95       	com	r18
 40a:	28 23       	and	r18, r24
 40c:	25 b9       	out	0x05, r18	; 5
 40e:	a9 cf       	rjmp	.-174    	; 0x362 <main+0xae>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 410:	20 91 0b 01 	lds	r18, 0x010B
 414:	30 91 0c 01 	lds	r19, 0x010C
 418:	30 93 89 00 	sts	0x0089, r19
 41c:	20 93 88 00 	sts	0x0088, r18
   OCR1B= light_val[i][1];
 420:	20 91 09 01 	lds	r18, 0x0109
 424:	30 91 0a 01 	lds	r19, 0x010A
 428:	30 93 8b 00 	sts	0x008B, r19
 42c:	20 93 8a 00 	sts	0x008A, r18
   OCR1C= light_val[i][0];
 430:	20 91 07 01 	lds	r18, 0x0107
 434:	30 91 08 01 	lds	r19, 0x0108
 438:	30 93 8d 00 	sts	0x008D, r19
 43c:	20 93 8c 00 	sts	0x008C, r18
 440:	87 cf       	rjmp	.-242    	; 0x350 <main+0x9c>
}
//*****************************

//Assigns PWM bottom to vary wavelength
void light_em_up(uint8_t i){
   OCR1A= light_val[i][2]; 
 442:	80 91 05 01 	lds	r24, 0x0105
 446:	90 91 06 01 	lds	r25, 0x0106
 44a:	90 93 89 00 	sts	0x0089, r25
 44e:	80 93 88 00 	sts	0x0088, r24
   OCR1B= light_val[i][1];
 452:	80 91 03 01 	lds	r24, 0x0103
 456:	90 91 04 01 	lds	r25, 0x0104
 45a:	90 93 8b 00 	sts	0x008B, r25
 45e:	80 93 8a 00 	sts	0x008A, r24
   OCR1C= light_val[i][0];
 462:	20 91 01 01 	lds	r18, 0x0101
 466:	30 91 02 01 	lds	r19, 0x0102
 46a:	30 93 8d 00 	sts	0x008D, r19
 46e:	20 93 8c 00 	sts	0x008C, r18
 472:	6e cf       	rjmp	.-292    	; 0x350 <main+0x9c>

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
